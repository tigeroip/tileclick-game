{"version":3,"sources":["D:/repos/dev/tileclick-game/tileclick-game/containers\\Gameboard.js"],"names":["Gameboard","props","postGame","handleClick","isActive","hit","Date","now","delay","state","starttime","socket","emit","setState","prevState","maxactivetiles","activetile","score","opponentscore","isloading","on","data","gotopostgame","nextProps","nextState","tiles","map","tile","showLoadingScreen","renderTiles"],"mappings":"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","file":"4.40dd8e5d2042bf3c58d9.hot-update.js","sourcesContent":["import { Component } from 'react'\r\nimport io from 'socket.io-client'\r\nimport ComponentGame from '../components/game/Game'\r\nimport ComponentTile from '../components/game/Tile'\r\nimport ComponentScore from '../components/game/Score'\r\n\r\n\r\nexport default class Gameboard extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            starttime: null,\r\n            activetile: null,\r\n            score: 0,\r\n            opponentscore: 0,\r\n            delay: null,\r\n            maxactivetiles: 10,\r\n            isloading: true\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.props.socket.emit('ready', true)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.on('activateboard', (data) => {\r\n            this.setState(function (state, props) {\r\n                return {\r\n                 ...data, isloading:false\r\n                }\r\n               });\r\n        })\r\n        this.props.socket.on('score', (data) => {\r\n            this.setState(function (state, props) {\r\n                return {\r\n                 ...data\r\n                }\r\n               });\r\n        })\r\n        this.props.socket.on('gamefinished', (data) => {\r\n            if (data.gotopostgame === true) this.postGame();\r\n        })\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState) {\r\n        if (nextState.maxactivetiles === 0) {\r\n            this.props.socket.emit('gamefinished', true)\r\n        }     \r\n    }\r\n\r\n    postGame = () => {\r\n        this.props.postGame()\r\n    }\r\n\r\n    handleClick = (isActive) => {\r\n        if (isActive == 1) {\r\n            let hit = Date.now();\r\n            let delay = hit - this.state.starttime; \r\n            this.props.socket.emit('score', {starttime : this.state.starttime, hit: hit})\r\n            // reset the gameboard\r\n            this.setState((prevState)=> {\r\n                if (prevState.maxactivetiles != 0) {\r\n                 return {activetile: null, delay : delay, maxactivetiles: prevState.maxactivetiles - 1}\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    renderTiles() {\r\n            const tiles = [1,2,3,4,5,6,7,8,9];\r\n            return tiles.map((tile) => {\r\n                if (this.state.activetile === tile)\r\n                    return <ComponentTile key={tile} className=\"active\" handleClick={this.handleClick} active={1}/>\r\n                else\r\n                    return <ComponentTile key={tile} active={0}/>\r\n            })\r\n    }\r\n\r\n    showLoadingScreen() {\r\n        return (<div> <p className=\"loading\">Waiting for other player to connect.</p>\r\n                <style jsx>{`\r\n                    .loading {\r\n                        color: red;\r\n                        text-align: center;\r\n                    }\r\n                `}</style>\r\n                </div>)\r\n    }\r\n\r\n\r\n  render () {\r\n    return (\r\n        <div className=\"container\">\r\n            <ComponentGame starttime={this.state.starttime}/>\r\n            {this.state.isloading ? this.showLoadingScreen() : <ComponentScore score={this.state.score} opponentscore={this.state.opponentscore} tilesleft={this.state.maxactivetiles} delay={this.state.delay}/>}\r\n            <div className=\"container-tiles\">\r\n                {this.renderTiles()}\r\n            </div>\r\n\r\n            <style jsx>{`\r\n                .container {\r\n                    position: relative;\r\n                    height: 100%;\r\n                    width: 100%;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    background-color: #ffffff;\r\n                }\r\n                .container-tiles {\r\n                    display: flex;\r\n                    width: 100%;\r\n                    height: 100%;\r\n                    align-items: center;\r\n                    margin: 35px auto 0;\r\n                    flex-wrap: wrap;\r\n                    justify-content: center;\r\n                    padding: 10px;\r\n                }\r\n                .active {\r\n                    background: red !important;\r\n                }\r\n                .container-score {\r\n                    display: flex;\r\n                    justify-content: space-around;\r\n                    align-items: center;\r\n                    width: 100%;\r\n                }\r\n            `}</style>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./containers/Gameboard.js"],"sourceRoot":""}