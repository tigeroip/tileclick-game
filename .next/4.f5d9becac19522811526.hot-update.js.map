{"version":3,"sources":["D:/repos/dev/tileclick-game/tileclick-game/containers\\Gameboard.js"],"names":["Gameboard","props","handleClick","isActive","hit","Date","now","delay","state","starttime","socket","emit","setState","prevState","activetile","maxactivetiles","score","opponentscore","on","data","tiles","map","tile","postGame","renderTiles"],"mappings":"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","file":"4.f5d9becac19522811526.hot-update.js","sourcesContent":["import { Component } from 'react'\r\nimport io from 'socket.io-client'\r\nimport ComponentGame from '../components/game/Game'\r\nimport ComponentTile from '../components/game/Tile'\r\nimport ComponentScore from '../components/game/Score'\r\n\r\n\r\nexport default class Gameboard extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            starttime: null,\r\n            activetile: null,\r\n            score: 0,\r\n            opponentscore: 0,\r\n            delay: null,\r\n            maxactivetiles: 20\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.emit('ready', true)\r\n        this.props.socket.on('activateboard', (data) => {\r\n            this.setState(function (state, props) {\r\n                return {\r\n                 ...data\r\n                }\r\n               });\r\n        })\r\n        this.props.socket.on('score', (data) => {\r\n            this.setState(function (state, props) {\r\n                return {\r\n                 ...data\r\n                }\r\n               });\r\n        })\r\n    }\r\n\r\n    handleClick = (isActive) => {\r\n        if (isActive == 1) {\r\n            let hit = Date.now();\r\n            let delay = hit - this.state.starttime; \r\n            this.props.socket.emit('score', {starttime : this.state.starttime, hit: hit})\r\n            // reset the gameboard\r\n            this.setState((prevState)=> {\r\n                return {activetile: null, delay : delay, maxactivetiles: prevState.maxactivetiles - 1}\r\n            })\r\n        }\r\n    }\r\n\r\n    renderTiles() {\r\n        if (this.state.maxactivetiles > 0) {\r\n            const tiles = [1,2,3,4,5,6,7,8,9];\r\n            return tiles.map((tile) => {\r\n                if (this.state.activetile === tile)\r\n                    return <ComponentTile key={tile} className=\"active\" handleClick={this.handleClick} active={1}/>\r\n                else\r\n                    return <ComponentTile key={tile} active={0}/>\r\n            })\r\n        }\r\n        else {\r\n            this.props.postGame();\r\n        }\r\n    }\r\n\r\n  render () {\r\n    return (\r\n        <div className=\"container\">\r\n            <ComponentGame starttime={this.state.starttime}/>\r\n            <ComponentScore score={this.state.score} opponentscore={this.state.opponentscore} tilesleft={this.state.maxactivetiles} delay={this.state.delay}/>\r\n            <div className=\"container-tiles\">\r\n                {this.renderTiles()}\r\n            </div>\r\n\r\n            <style jsx>{`\r\n                .container {\r\n                    position: absolute;\r\n                    height: 500px;\r\n                    width: 600px;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n                .container-tiles {\r\n                    display: flex;\r\n                    width: 500px;\r\n                    align-items: center;\r\n                    margin: 35px auto 0;\r\n                    flex-wrap: wrap;\r\n                }\r\n                .active {\r\n                    background: red !important;\r\n                }\r\n                .container-score {\r\n                    display: flex;\r\n                    justify-content: space-around;\r\n                    align-items: center;\r\n                    width: 100%;\r\n                }\r\n            `}</style>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./containers/Gameboard.js"],"sourceRoot":""}